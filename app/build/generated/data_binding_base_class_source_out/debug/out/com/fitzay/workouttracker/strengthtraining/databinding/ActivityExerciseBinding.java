// Generated by view binder compiler. Do not edit!
package com.fitzay.workouttracker.strengthtraining.databinding;

import aglibs.loading.skeleton.layout.SkeletonRelativeLayout;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.fitzay.workouttracker.strengthtraining.R;
import com.google.android.ads.nativetemplates.TemplateView;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityExerciseBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final View btnNext;

  @NonNull
  public final RelativeLayout cardFinish;

  @NonNull
  public final RelativeLayout cardIncreaseTime;

  @NonNull
  public final ConstraintLayout clAds;

  @NonNull
  public final AppCompatButton cta;

  @NonNull
  public final TextView description;

  @NonNull
  public final TextView ex;

  @NonNull
  public final ImageView exImage;

  @NonNull
  public final TextView exName;

  @NonNull
  public final TextView exNameThree;

  @NonNull
  public final TextView exNameTwo;

  @NonNull
  public final TextView exTime;

  @NonNull
  public final ImageView icExNext;

  @NonNull
  public final ImageView icExPrevious;

  @NonNull
  public final ImageView img001;

  @NonNull
  public final ImageView ivBack;

  @NonNull
  public final RelativeLayout layoutAd;

  @NonNull
  public final RelativeLayout layoutExercise;

  @NonNull
  public final RelativeLayout layoutMovement;

  @NonNull
  public final LinearLayout layoutNext;

  @NonNull
  public final LinearLayout layoutPrevious;

  @NonNull
  public final LinearLayout layoutReady;

  @NonNull
  public final ConstraintLayout layoutRest;

  @NonNull
  public final MaterialToolbar materialToolbar;

  @NonNull
  public final TemplateView plannerTemplateDown;

  @NonNull
  public final TemplateView plannerTemplateUp;

  @NonNull
  public final LinearProgressIndicator progressBar;

  @NonNull
  public final SkeletonRelativeLayout skeletonLayout;

  @NonNull
  public final RelativeLayout skip;

  @NonNull
  public final TextView text001;

  @NonNull
  public final TextView textlay;

  @NonNull
  public final MaterialTextView tvSleepEnough;

  @NonNull
  public final TextView txtProgress;

  @NonNull
  public final TextView txtReadyNext;

  @NonNull
  public final TextView txtReadyToGo;

  @NonNull
  public final TextView txtTakeRest;

  @NonNull
  public final TextView txtToolbar;

  @NonNull
  public final ImageView v;

  private ActivityExerciseBinding(@NonNull RelativeLayout rootView, @NonNull View btnNext,
      @NonNull RelativeLayout cardFinish, @NonNull RelativeLayout cardIncreaseTime,
      @NonNull ConstraintLayout clAds, @NonNull AppCompatButton cta, @NonNull TextView description,
      @NonNull TextView ex, @NonNull ImageView exImage, @NonNull TextView exName,
      @NonNull TextView exNameThree, @NonNull TextView exNameTwo, @NonNull TextView exTime,
      @NonNull ImageView icExNext, @NonNull ImageView icExPrevious, @NonNull ImageView img001,
      @NonNull ImageView ivBack, @NonNull RelativeLayout layoutAd,
      @NonNull RelativeLayout layoutExercise, @NonNull RelativeLayout layoutMovement,
      @NonNull LinearLayout layoutNext, @NonNull LinearLayout layoutPrevious,
      @NonNull LinearLayout layoutReady, @NonNull ConstraintLayout layoutRest,
      @NonNull MaterialToolbar materialToolbar, @NonNull TemplateView plannerTemplateDown,
      @NonNull TemplateView plannerTemplateUp, @NonNull LinearProgressIndicator progressBar,
      @NonNull SkeletonRelativeLayout skeletonLayout, @NonNull RelativeLayout skip,
      @NonNull TextView text001, @NonNull TextView textlay, @NonNull MaterialTextView tvSleepEnough,
      @NonNull TextView txtProgress, @NonNull TextView txtReadyNext, @NonNull TextView txtReadyToGo,
      @NonNull TextView txtTakeRest, @NonNull TextView txtToolbar, @NonNull ImageView v) {
    this.rootView = rootView;
    this.btnNext = btnNext;
    this.cardFinish = cardFinish;
    this.cardIncreaseTime = cardIncreaseTime;
    this.clAds = clAds;
    this.cta = cta;
    this.description = description;
    this.ex = ex;
    this.exImage = exImage;
    this.exName = exName;
    this.exNameThree = exNameThree;
    this.exNameTwo = exNameTwo;
    this.exTime = exTime;
    this.icExNext = icExNext;
    this.icExPrevious = icExPrevious;
    this.img001 = img001;
    this.ivBack = ivBack;
    this.layoutAd = layoutAd;
    this.layoutExercise = layoutExercise;
    this.layoutMovement = layoutMovement;
    this.layoutNext = layoutNext;
    this.layoutPrevious = layoutPrevious;
    this.layoutReady = layoutReady;
    this.layoutRest = layoutRest;
    this.materialToolbar = materialToolbar;
    this.plannerTemplateDown = plannerTemplateDown;
    this.plannerTemplateUp = plannerTemplateUp;
    this.progressBar = progressBar;
    this.skeletonLayout = skeletonLayout;
    this.skip = skip;
    this.text001 = text001;
    this.textlay = textlay;
    this.tvSleepEnough = tvSleepEnough;
    this.txtProgress = txtProgress;
    this.txtReadyNext = txtReadyNext;
    this.txtReadyToGo = txtReadyToGo;
    this.txtTakeRest = txtTakeRest;
    this.txtToolbar = txtToolbar;
    this.v = v;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityExerciseBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityExerciseBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_exercise, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityExerciseBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnNext;
      View btnNext = ViewBindings.findChildViewById(rootView, id);
      if (btnNext == null) {
        break missingId;
      }

      id = R.id.cardFinish;
      RelativeLayout cardFinish = ViewBindings.findChildViewById(rootView, id);
      if (cardFinish == null) {
        break missingId;
      }

      id = R.id.cardIncreaseTime;
      RelativeLayout cardIncreaseTime = ViewBindings.findChildViewById(rootView, id);
      if (cardIncreaseTime == null) {
        break missingId;
      }

      id = R.id.clAds;
      ConstraintLayout clAds = ViewBindings.findChildViewById(rootView, id);
      if (clAds == null) {
        break missingId;
      }

      id = R.id.cta;
      AppCompatButton cta = ViewBindings.findChildViewById(rootView, id);
      if (cta == null) {
        break missingId;
      }

      id = R.id.description;
      TextView description = ViewBindings.findChildViewById(rootView, id);
      if (description == null) {
        break missingId;
      }

      id = R.id.ex;
      TextView ex = ViewBindings.findChildViewById(rootView, id);
      if (ex == null) {
        break missingId;
      }

      id = R.id.exImage;
      ImageView exImage = ViewBindings.findChildViewById(rootView, id);
      if (exImage == null) {
        break missingId;
      }

      id = R.id.exName;
      TextView exName = ViewBindings.findChildViewById(rootView, id);
      if (exName == null) {
        break missingId;
      }

      id = R.id.exNameThree;
      TextView exNameThree = ViewBindings.findChildViewById(rootView, id);
      if (exNameThree == null) {
        break missingId;
      }

      id = R.id.exNameTwo;
      TextView exNameTwo = ViewBindings.findChildViewById(rootView, id);
      if (exNameTwo == null) {
        break missingId;
      }

      id = R.id.exTime;
      TextView exTime = ViewBindings.findChildViewById(rootView, id);
      if (exTime == null) {
        break missingId;
      }

      id = R.id.icExNext;
      ImageView icExNext = ViewBindings.findChildViewById(rootView, id);
      if (icExNext == null) {
        break missingId;
      }

      id = R.id.icExPrevious;
      ImageView icExPrevious = ViewBindings.findChildViewById(rootView, id);
      if (icExPrevious == null) {
        break missingId;
      }

      id = R.id.img001;
      ImageView img001 = ViewBindings.findChildViewById(rootView, id);
      if (img001 == null) {
        break missingId;
      }

      id = R.id.ivBack;
      ImageView ivBack = ViewBindings.findChildViewById(rootView, id);
      if (ivBack == null) {
        break missingId;
      }

      id = R.id.layoutAd;
      RelativeLayout layoutAd = ViewBindings.findChildViewById(rootView, id);
      if (layoutAd == null) {
        break missingId;
      }

      id = R.id.layoutExercise;
      RelativeLayout layoutExercise = ViewBindings.findChildViewById(rootView, id);
      if (layoutExercise == null) {
        break missingId;
      }

      id = R.id.layoutMovement;
      RelativeLayout layoutMovement = ViewBindings.findChildViewById(rootView, id);
      if (layoutMovement == null) {
        break missingId;
      }

      id = R.id.layoutNext;
      LinearLayout layoutNext = ViewBindings.findChildViewById(rootView, id);
      if (layoutNext == null) {
        break missingId;
      }

      id = R.id.layoutPrevious;
      LinearLayout layoutPrevious = ViewBindings.findChildViewById(rootView, id);
      if (layoutPrevious == null) {
        break missingId;
      }

      id = R.id.layoutReady;
      LinearLayout layoutReady = ViewBindings.findChildViewById(rootView, id);
      if (layoutReady == null) {
        break missingId;
      }

      id = R.id.layoutRest;
      ConstraintLayout layoutRest = ViewBindings.findChildViewById(rootView, id);
      if (layoutRest == null) {
        break missingId;
      }

      id = R.id.materialToolbar;
      MaterialToolbar materialToolbar = ViewBindings.findChildViewById(rootView, id);
      if (materialToolbar == null) {
        break missingId;
      }

      id = R.id.plannerTemplateDown;
      TemplateView plannerTemplateDown = ViewBindings.findChildViewById(rootView, id);
      if (plannerTemplateDown == null) {
        break missingId;
      }

      id = R.id.plannerTemplateUp;
      TemplateView plannerTemplateUp = ViewBindings.findChildViewById(rootView, id);
      if (plannerTemplateUp == null) {
        break missingId;
      }

      id = R.id.progressBar;
      LinearProgressIndicator progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.skeletonLayout;
      SkeletonRelativeLayout skeletonLayout = ViewBindings.findChildViewById(rootView, id);
      if (skeletonLayout == null) {
        break missingId;
      }

      id = R.id.skip;
      RelativeLayout skip = ViewBindings.findChildViewById(rootView, id);
      if (skip == null) {
        break missingId;
      }

      id = R.id.text001;
      TextView text001 = ViewBindings.findChildViewById(rootView, id);
      if (text001 == null) {
        break missingId;
      }

      id = R.id.textlay;
      TextView textlay = ViewBindings.findChildViewById(rootView, id);
      if (textlay == null) {
        break missingId;
      }

      id = R.id.tvSleepEnough;
      MaterialTextView tvSleepEnough = ViewBindings.findChildViewById(rootView, id);
      if (tvSleepEnough == null) {
        break missingId;
      }

      id = R.id.txtProgress;
      TextView txtProgress = ViewBindings.findChildViewById(rootView, id);
      if (txtProgress == null) {
        break missingId;
      }

      id = R.id.txtReadyNext;
      TextView txtReadyNext = ViewBindings.findChildViewById(rootView, id);
      if (txtReadyNext == null) {
        break missingId;
      }

      id = R.id.txtReadyToGo;
      TextView txtReadyToGo = ViewBindings.findChildViewById(rootView, id);
      if (txtReadyToGo == null) {
        break missingId;
      }

      id = R.id.txtTakeRest;
      TextView txtTakeRest = ViewBindings.findChildViewById(rootView, id);
      if (txtTakeRest == null) {
        break missingId;
      }

      id = R.id.txtToolbar;
      TextView txtToolbar = ViewBindings.findChildViewById(rootView, id);
      if (txtToolbar == null) {
        break missingId;
      }

      id = R.id.v;
      ImageView v = ViewBindings.findChildViewById(rootView, id);
      if (v == null) {
        break missingId;
      }

      return new ActivityExerciseBinding((RelativeLayout) rootView, btnNext, cardFinish,
          cardIncreaseTime, clAds, cta, description, ex, exImage, exName, exNameThree, exNameTwo,
          exTime, icExNext, icExPrevious, img001, ivBack, layoutAd, layoutExercise, layoutMovement,
          layoutNext, layoutPrevious, layoutReady, layoutRest, materialToolbar, plannerTemplateDown,
          plannerTemplateUp, progressBar, skeletonLayout, skip, text001, textlay, tvSleepEnough,
          txtProgress, txtReadyNext, txtReadyToGo, txtTakeRest, txtToolbar, v);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
