// Generated by view binder compiler. Do not edit!
package com.fitzay.workouttracker.strengthtraining.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.fitzay.workouttracker.strengthtraining.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RemoteNotificationBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button notificationButton;

  @NonNull
  public final ImageView notificationIcon;

  @NonNull
  public final TextView notificationSubtitle;

  @NonNull
  public final TextView notificationTitle;

  private RemoteNotificationBinding(@NonNull LinearLayout rootView,
      @NonNull Button notificationButton, @NonNull ImageView notificationIcon,
      @NonNull TextView notificationSubtitle, @NonNull TextView notificationTitle) {
    this.rootView = rootView;
    this.notificationButton = notificationButton;
    this.notificationIcon = notificationIcon;
    this.notificationSubtitle = notificationSubtitle;
    this.notificationTitle = notificationTitle;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RemoteNotificationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RemoteNotificationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.remote_notification, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RemoteNotificationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.notification_button;
      Button notificationButton = ViewBindings.findChildViewById(rootView, id);
      if (notificationButton == null) {
        break missingId;
      }

      id = R.id.notification_icon;
      ImageView notificationIcon = ViewBindings.findChildViewById(rootView, id);
      if (notificationIcon == null) {
        break missingId;
      }

      id = R.id.notification_subtitle;
      TextView notificationSubtitle = ViewBindings.findChildViewById(rootView, id);
      if (notificationSubtitle == null) {
        break missingId;
      }

      id = R.id.notification_title;
      TextView notificationTitle = ViewBindings.findChildViewById(rootView, id);
      if (notificationTitle == null) {
        break missingId;
      }

      return new RemoteNotificationBinding((LinearLayout) rootView, notificationButton,
          notificationIcon, notificationSubtitle, notificationTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
